using Hiero.Implementation;
using System;
using System.Diagnostics;

namespace Hiero;

/// <summary>
/// Represents the transaction id associated with a network request.  
/// This is generated by the library automatically for each request.  
/// <code>TransactionId</code> implements the equitable interface and 
/// can be compared to other transaction ids returned from the library.
/// </summary>
[DebuggerDisplay("{ToString(),nq}")]
public sealed record TransactionId
{
    /// <summary>
    /// The payer of the account paying the
    /// transaction processing fee.
    /// </summary>
    public EntityId Payer { get; private init; }
    /// <summary>
    /// The number of whole seconds since the Epoch.
    /// </summary>
    public long ValidStartSeconds { get; private init; }
    /// <summary>
    /// The number of nanoseconds added to the 
    /// <see cref="ValidStartSeconds"/> value to 
    /// produce the total amount of time since the
    /// Epoch.
    /// </summary>
    /// <remarks>
    /// Unfortunately the native .net DateTime class
    /// does not represent time at the resolution of
    /// nano-seconds.  Therefore it is necessary to
    /// represent the date time in this manner.
    /// </remarks>
    public int ValidStartNanos { get; private init; }
    /// <summary>
    /// This transaction ID represents a scheduled or 
    /// scheduled transaction that may or may not have 
    /// been executed.  The flag should be set to true 
    /// when interacting with scheduled transactions.
    /// </summary>
    public bool Scheduled { get; private init; }
    /// <summary>
    /// When non-zero, indicates that this transaction 
    /// is a child transaction spawned as a part of a 
    /// larger user-initiated transaction, such as an 
    /// implicit account creation (pay to key alias) 
    /// or side  effects of a contract method invocation.
    /// It will have the payer and timestamp matching 
    /// the parent transaction that initiated the original 
    /// ledger state change.
    /// </summary>
    public int ChildNonce { get; private init; }
    /// <summary>
    /// Public constructor.
    /// </summary>
    /// <param name="payer">
    /// The payer of the account that is
    /// both associated with and pays the
    /// transaction fees for this transaction.
    /// </param>
    /// <param name="seconds">
    /// The total number of seconds elapsed
    /// since the Epoch.  Represents the 
    /// earliest point in time the network
    /// will consider the transaction valid.
    /// </param>
    /// <param name="nanos">
    /// The number of nanoseconds elapsed past
    /// the seconds portion of the time period
    /// identified in the seconds parameter.
    /// </param>
    /// <param name="scheduled">
    /// Flag indicating that this transaction ID
    /// represents a scheduled transaction and not 
    /// the transaction that scheduled it.  Useful
    /// retrieving receipts and records, but cannot
    /// be set to true for creating new transactions
    /// (via setting it in the context).
    /// </param>
    /// <param name="childNonce">
    /// When non-zero, indicates that this transaction 
    /// is a child transaction spawned as a part of a 
    /// larger user-initiated transaction, such as an 
    /// implicit account creation (pay to alias) or side 
    /// effects of a contract method invocation.  It 
    /// will have the payer and timestamp matching 
    /// the transaction that initiated the original 
    /// ledger state change.
    /// </param>
    public TransactionId(EntityId payer, long seconds, int nanos, bool scheduled = false, int childNonce = 0)
    {
        Payer = payer;
        ValidStartSeconds = seconds;
        ValidStartNanos = nanos;
        Scheduled = scheduled;
        ChildNonce = childNonce;
    }
    /// <summary>
    /// Convenience constructor converting the
    /// entered <code>DateTime</code> object into
    /// the proper seconds and nanoseconds since the
    /// Epoch for use by the network.
    /// </summary>
    /// <param name="payer">
    /// The payer of the account that is
    /// both associated with and pays the
    /// transaction fees for this transaction.
    /// </param>
    /// <param name="dateTime">
    /// The date and time stamp for this transaction.
    /// Represents the earliest point in time the 
    /// network will consider the transaction valid.
    /// </param>
    /// <param name="scheduled">
    /// Flag indicating that this transaction ID
    /// represents a scheduled transaction and not 
    /// the transaction that scheduled it.  Useful
    /// retrieving receipts and records, but cannot
    /// be set to true for creating new transactions
    /// (via setting it in the context).
    /// </param>
    /// <param name="childNonce">
    /// When non-zero, indicates that this transaction 
    /// is a child transaction spawned as a part of a 
    /// larger user-initiated transaction, such as an 
    /// implicit account creation (pay to alias) or side 
    /// effects of a contract method invocation.  It 
    /// will have the payer and timestamp matching 
    /// the transaction that initiated the original 
    /// ledger state change.
    /// </param>
    public TransactionId(EntityId payer, DateTime dateTime, bool scheduled = false, int childNonce = 0)
    {
        Payer = payer;
        (ValidStartSeconds, ValidStartNanos) = Epoch.FromDate(dateTime);
        Scheduled = scheduled;
        ChildNonce = childNonce;
    }
    /// <summary>
    /// A special designation of an transaction id that can't be created.
    /// It represents the absence of a transaction id.
    /// </summary>
    public static TransactionId None { get; } = new TransactionId(EntityId.None, 0, 0, false, 0);
    /// <summary>
    /// Returns a string representation of the transaction id.
    /// </summary>
    /// <returns>
    /// Notional string representation of the transaction id.
    /// </returns>
    public override string ToString()
    {
        if (Scheduled)
        {
            if (ChildNonce != 0)
            {
                return $"{Payer}@{ValidStartSeconds}.{ValidStartNanos:D9}:{ChildNonce}-scheduled";
            }
            return $"{Payer}@{ValidStartSeconds}.{ValidStartNanos:D9}-scheduled";
        }
        else if (ChildNonce != 0)
        {
            return $"{Payer}@{ValidStartSeconds}.{ValidStartNanos:D9}:{ChildNonce}";
        }
        return $"{Payer}@{ValidStartSeconds}.{ValidStartNanos:D9}";
    }
}